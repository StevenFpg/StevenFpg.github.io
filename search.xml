<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MySql优化原则</title>
      <link href="/2020/05/03/mysql-you-hua-da-quan/"/>
      <url>/2020/05/03/mysql-you-hua-da-quan/</url>
      
        <content type="html"><![CDATA[<h3 id="最左前缀原则"><a href="#最左前缀原则" class="headerlink" title="最左前缀原则"></a>最左前缀原则</h3><blockquote><p>MySQL中的索引可以以一定顺序引用多列，这种索引叫作联合索引。如User表的name和city加联合索引就是<br>(name,city)o而最左前缀原则指的是，如果查询的时候查询条件精确匹配索引的左边连续<br>一列或几列，则此列就可以被用到。如下：</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">select</span> * from user where name<span class="token operator">=</span>xx and city<span class="token operator">=</span>xx <span class="token punctuation">;</span> ／／可以命中索引<span class="token keyword">select</span> * from user where name<span class="token operator">=</span>xx <span class="token punctuation">;</span> // 可以命中索引<span class="token keyword">select</span> * from user where city<span class="token operator">=</span>xx<span class="token punctuation">;</span> // 无法命中索引<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>如果查询条件有多个且只是顺序不同也能命中索引，因为查询引擎会自动优化匹配联合索引如:</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">city <span class="token operator">=</span> xx and name <span class="token operator">=</span> xx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="注意避免冗余"><a href="#注意避免冗余" class="headerlink" title="注意避免冗余"></a>注意避免冗余</h3><blockquote><p>冗余索引指的是索引的功能相同，如（name,city ）和（name ）这两<br>个索引就是冗余索引，能够命中后者的查询肯定是能够命中前者的 在大多数情况下，都应该尽量扩展已有的索引而不是创建新索引。</p></blockquote><hr><h2 id="MySql如何为表字段添加索引？"><a href="#MySql如何为表字段添加索引？" class="headerlink" title="MySql如何为表字段添加索引？"></a>MySql如何为表字段添加索引？</h2><p><strong>1.添加PRIMARY KEY（主键索引）</strong></p><pre class="line-numbers language-bash"><code class="language-bash">ALTER TABLE <span class="token variable"><span class="token variable">`</span>表名<span class="token variable">`</span></span> ADD PRIMARY KEY <span class="token punctuation">(</span><span class="token variable"><span class="token variable">`</span>column<span class="token variable">`</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>2.添加UNIQUE（唯一索引）</strong></p><pre class="line-numbers language-bash"><code class="language-bash">ALTER TABLE <span class="token variable"><span class="token variable">`</span>表名<span class="token variable">`</span></span> ADD UNIQUE <span class="token punctuation">(</span><span class="token variable"><span class="token variable">`</span>column<span class="token variable">`</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>3.添加INDEX()普通索引</strong></p><pre class="line-numbers language-bash"><code class="language-bash">ALTER TABLE <span class="token string">'表名'</span> ADD INDEX INDEX_NAME <span class="token punctuation">(</span><span class="token variable"><span class="token variable">`</span>column<span class="token variable">`</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>4.添加FULLTEXT(全文索引)</strong></p><pre><code>ALTER TABLE `表名` ADD FULLTEXT (`column`)</code></pre><p><strong>5.添加多列索引</strong></p><pre><code>ALTER TABLE `表名` ADD INDEX INDEX_NAME (`column1`,`column2`,`column3`)</code></pre><hr><h2 id="当MySQL单表记录数过大时，数据库的CRUD性能会明显下降，一些常见的优化措施如下："><a href="#当MySQL单表记录数过大时，数据库的CRUD性能会明显下降，一些常见的优化措施如下：" class="headerlink" title="当MySQL单表记录数过大时，数据库的CRUD性能会明显下降，一些常见的优化措施如下："></a>当MySQL单表记录数过大时，数据库的CRUD性能会明显下降，一些常见的优化措施如下：</h2><p>1.<strong>限定数据的范围：</strong>务必禁止不带任何限制范围的查询语句<br>2.<strong>读/写分离：</strong>主库负责写，从库负责读<br>3.<strong>垂直分区：</strong>垂直分区是指数据表列的拆分，把一张列比较多的表拆分为多张表</p><blockquote><p>垂直拆分的缺点：主键会出现冗余，需要管理冗余列，并会引起join操作，垂直分区会让事务变的更加复杂</p></blockquote><p>4.<strong>水平分区：</strong>保持数据结果不变，通过某种策列进行存储分片，这样每一片数据分散到不同的表或者库中，达到分布式的目的</p><blockquote><p>水平拆分可以支撑非常大的数据量，需要注意的是分表只是单单解决了单表数据量大的问题，但由于表还在同一台机器上，其实对于提升MySQL的并发能力没有什么意义，所以&gt;水平拆分最好分库，水平拆分可以解决单表数据量大的问题，但分片事务难以解决，跨界点join性能较差，逻辑复杂，所以尽量不要对数据进行分片，因为拆分会带来逻辑、部署、运维的各种复杂度</p></blockquote><h3 id="两种数据库分片的常见解决方案"><a href="#两种数据库分片的常见解决方案" class="headerlink" title="两种数据库分片的常见解决方案"></a>两种数据库分片的常见解决方案</h3><ul><li><em><em>客户端代理： </em></em>分片逻辑在应用端，封装在jar包中，通过修改或者封装JDBC层来实现。 当当网的 ShardingJDBC 、阿里的TDDL是两种比较常用的实现。</li><li><em><em>中间件代理： </em></em>在应用和数据中间加了一个代理层。分片逻辑统一维护在中间件服务中。 我们现在谈的 Mycat、360的Atlas、网易的DDB等等都是这种架构的实现。</li></ul>]]></content>
      
      
      <categories>
          
          <category> MySql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一篇博客文章</title>
      <link href="/2020/05/02/di-yi-pian-bo-ke-wen-zhang/"/>
      <url>/2020/05/02/di-yi-pian-bo-ke-wen-zhang/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/05/02/hello-world/"/>
      <url>/2020/05/02/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
